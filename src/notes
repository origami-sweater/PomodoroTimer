The session timer shows the type of session, 
either "Focusing" or "On Break", 
the total duration of the session, the time remaining, 
and a progress bar showing how much of the session is complete.

Stopping a session
Stopping a session returns the application to the initial 
screen and the user is able to change the focus and 
break duration.

Clicking the Play button will always 
start a new focus session.

Specific instructions
The code has various TODO items that should help you 
build the project as expected. With that said, 
feel free to make the changes you feel 
are necessary to accomplish the tasks.

Break up the code into at least two additional 
components that have a single responsibility.

1.The user cannot change the duration of the 
focus or break during a focus or break session.

2.Display durations as mm:ss. That is, 05:00 
for 5 minutes or 18:45 for eighteen minutes 
and forty-five seconds.

The tests use the data-testid="..." attributes 
on elements. Removing these will break one or 
more tests.

Using setInterval in React
Using setInterval with React functional 
components requires a custom hook.

There's a custom useInterval hook provided 
in src/utils/useInterval/index.js for you to use. 
The useInterval hook is already set up to 
start and stop with the Play/Pause buttons

You may not have learned about hooks yet, 
but don't worryâ€”this function works exactly 
like setInterval except you don't need to 
use clearInterval to stop it.

As it is currently configured, 
the useInterval will execute the code in 
the callback every second, unless 
isTimerRunning is set to false.

This should be sufficient to implement 
the pomodoro timer.

Playing audio alarm
Use the following code to play an alarm when the time expires. 
You can upload your own sound or use the one provided in the link below.

new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();
The classNames function
import classNames from "../utils/class-names";

Use this function to dynamically assign 
the className property of react components.

Usage:

<span
  className={classNames({
    oi: true,
    "oi-media-play": currentState.isPaused,
    "oi-media-pause": !currentState.isPaused,
  })}
/>
If currentState.isPaused === true, 
the className will be oi oi-media-play Otherwise, 
it will be oi oi-media-pause.

classNames takes a map of a class name to a boolean value. 
If the boolean value is true, the class name is included. 
Otherwise, it is excluded.

returns: A space delimited string of the class 
names which have a value of true.

The minutesToDuration function
minutesToDuration formats a number of 
minutes as mm:00. Here's an example:

import { minutesToDuration } from "../utils/duration";
minutesToDuration(3); // '03:00'
minutesToDuration(45); // '45:00'
The secondsToDuration function
secondsToDuration formats a number of seconds as mm:ss. Here's an example:

import { secondsToDuration } from "../utils/duration";
secondsToDuration(305); // '05:05'
secondsToDuration(930); // '15:30'
Debugging
If you have a failing test, but the application appears 
to be working correctly when you view it in the browser, 
try the following debugging steps:

In ./src/pomodoro/Pomodoro.js, find isTimerRunning ? 1000 : null 
and temporarily change it to isTimerRunning ? 100 : null.
This will make the timer run 10 times faster, 
making it easier to debug.

Start the app and open it in the browser.
Set the focus and break times to the minimum values.
Click the play button to start the pomodoro timer.
Observe the application going through multiple 
focus/break sessions. Let it run through at least 
two transitions from "Focusing" to "On break" and 
back to "Focusing", just like a real user.

Check the values displayed in session title, 
session subtitle, and progress bar.
At this point, you will likely see the problem.
In ./src/pomodoro/Pomodoro.js, change isTimerRunning ? 100 : null 
back to isTimerRunning ? 1000 : null so that 
the timer runs at normal speed.

Note: In addition to needing to pass the tests 
and requirements in the instructions here, 
please review the Rubric Requirements for the 
human-graded part of this project in your 
Thinkful curriculum page.

Tests failing unexpectedly on your local machine?
If you've completed the assessment but the tests are 
still failing on your local machine, 
then try recreating the project dependencies, as follows:

Delete the package-lock.json file.
Delete the node_modules directory.
Run npm install.
Then try running the tests again.


KELS
Pomodoroo times need to be mm:ss
addign disables? need to rewatch videos
