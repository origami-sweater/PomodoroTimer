{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kelse\\\\OneDrive\\\\Desktop\\\\react-apps\\\\pomodoro-timer\\\\src\\\\pomodoro\\\\TimerBar.js\";\nimport React from \"react\";\nimport progressBarStyle from \"./ProgressBarStyle\";\n\nfunction convertMS(value) {\n  const sec = parseInt(value, 10); // convert value to number if it's string\n\n  let minutes = Math.floor(sec / 60); // get minutes\n\n  let seconds = sec - minutes * 60; //  get seconds\n  // add 0 if value < 10; Example: 2 => 02\n\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n\n  return minutes + ':' + seconds; // Return is MM : SS\n} //<PauseMessage isTimerRunning={isTimerRunning}/>\n\n\nfunction TimerBar({\n  session,\n  breakDuration,\n  focusDuration,\n  isTimerRunning\n}) {\n  //formats Progress Bar\n\n  /*   function progressbarStyle(focusDuration, breakDuration, session){\r\n         if (session?.label === \"Focusing\") {\r\n           const amt= session.timeRemaining / focusDuration * 100;\r\n           return amt;\r\n         } else {\r\n           const amt= session.timeRemaining / breakDuration * 100;\r\n           return amt;\r\n         }\r\n       }*/\n  if (session !== null) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }\n    }, session === null || session === void 0 ? void 0 : session.label, \" for\", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 19\n      }\n    }, \" \", (session === null || session === void 0 ? void 0 : session.label) === \"Focusing\" ? convertMS(focusDuration) : convertMS(breakDuration), \" \"), \"minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }\n    }, convertMS(session === null || session === void 0 ? void 0 : session.timeRemaining), \" remaining\"), isTimerRunning ? null : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 42\n      }\n    }, \"Paused\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"progressBarStyle\", {\n      breakDuration: breakDuration,\n      focusDuration: focusDuration,\n      session: session,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 19\n      }\n    })))));\n  } else {\n    return null;\n  }\n}\n\nexport default TimerBar;","map":{"version":3,"sources":["C:/Users/kelse/OneDrive/Desktop/react-apps/pomodoro-timer/src/pomodoro/TimerBar.js"],"names":["React","progressBarStyle","convertMS","value","sec","parseInt","minutes","Math","floor","seconds","TimerBar","session","breakDuration","focusDuration","isTimerRunning","label","timeRemaining","height"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,QAAMC,GAAG,GAAGC,QAAQ,CAACF,KAAD,EAAQ,EAAR,CAApB,CADsB,CACW;;AACjC,MAAIG,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAYJ,GAAG,GAAC,EAAhB,CAAd,CAFsB,CAEc;;AACpC,MAAIK,OAAO,GAAGL,GAAG,GAAIE,OAAO,GAAG,EAA/B,CAHsB,CAGc;AACpC;;AACA,MAAIA,OAAO,GAAG,EAAd,EAAkB;AAACA,IAAAA,OAAO,GAAG,MAAIA,OAAd;AAAuB;;AAC1C,MAAIG,OAAO,GAAG,EAAd,EAAkB;AAACA,IAAAA,OAAO,GAAG,MAAIA,OAAd;AAAuB;;AAC1C,SAAOH,OAAO,GAAC,GAAR,GAAYG,OAAnB,CAPsB,CAOM;AAC7B,C,CAGH;;;AACA,SAASC,QAAT,CAAkB;AAACC,EAAAA,OAAD;AAAUC,EAAAA,aAAV;AAAyBC,EAAAA,aAAzB;AAAwCC,EAAAA;AAAxC,CAAlB,EAA2E;AACvE;;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEI,MAAIH,OAAO,KAAK,IAAhB,EAAsB;AACpB,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,OADH,aACGA,OADH,uBACGA,OAAO,CAAEI,KADZ,uBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAQ,CAAAJ,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEI,KAAT,MAAmB,UAAnB,GAAgCb,SAAS,CAACW,aAAD,CAAzC,GAA2DX,SAAS,CAACU,aAAD,CAA5E,MAFF,YAFF,eAQE;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,qBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGV,SAAS,CAACS,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEK,aAAV,CADZ,eARF,EAWGF,cAAc,GAAG,IAAH,gBAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAX3B,CADJ,CADF,eAgBI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAE;AAAEG,QAAAA,MAAM,EAAE;AAAV,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAkB,MAAA,aAAa,EAAEL,aAAjC;AAAgD,MAAA,aAAa,EAAEC,aAA/D;AAA8E,MAAA,OAAO,EAAEF,OAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,CADF,CAhBJ,CADF;AA0BE,GA3BJ,MA2BU;AACN,WAAO,IAAP;AACD;AACJ;;AAED,eAAeD,QAAf","sourcesContent":["\r\nimport React from \"react\";\r\nimport progressBarStyle from \"./ProgressBarStyle\"\r\n\r\nfunction convertMS(value) {\r\n    const sec = parseInt(value, 10); // convert value to number if it's string\r\n    let minutes = Math.floor((sec/60)); // get minutes\r\n    let seconds = sec - (minutes * 60); //  get seconds\r\n    // add 0 if value < 10; Example: 2 => 02\r\n    if (minutes < 10) {minutes = \"0\"+minutes;}\r\n    if (seconds < 10) {seconds = \"0\"+seconds;}\r\n    return minutes+':'+seconds; // Return is MM : SS\r\n  }\r\n\r\n  \r\n//<PauseMessage isTimerRunning={isTimerRunning}/>\r\nfunction TimerBar({session, breakDuration, focusDuration, isTimerRunning}) {\r\n    //formats Progress Bar\r\n /*   function progressbarStyle(focusDuration, breakDuration, session){\r\n        if (session?.label === \"Focusing\") {\r\n          const amt= session.timeRemaining / focusDuration * 100;\r\n          return amt;\r\n        } else {\r\n          const amt= session.timeRemaining / breakDuration * 100;\r\n          return amt;\r\n        }\r\n      }*/\r\n    \r\n    if (session !== null) {\r\n      return (\r\n        <div>\r\n          <div className=\"row mb-2\">\r\n              <div className=\"col\">\r\n                {/* Session & Total Session Time*/}\r\n                <h2 data-testid=\"session-title\">\r\n                  {session?.label} for \r\n                  <span> {session?.label === \"Focusing\" ? convertMS(focusDuration) : convertMS(breakDuration)} </span>\r\n                  minutes\r\n                </h2>\r\n                {/* Countdown Timer */}\r\n                <p className=\"lead\" data-testid=\"session-sub-title\">\r\n                  {convertMS(session?.timeRemaining)} remaining\r\n                </p>\r\n                {isTimerRunning ? null : <p>Paused</p>}\r\n              </div>\r\n            </div>\r\n            <div className=\"row mb-2\">\r\n              <div className=\"col\">\r\n                <div className=\"progress\" style={{ height: \"20px\" }}>\r\n                 \r\n                  <progressBarStyle breakDuration={breakDuration} focusDuration={focusDuration} session={session} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n      )} else {\r\n        return null;\r\n      }\r\n  }\r\n\r\n  export default TimerBar;"]},"metadata":{},"sourceType":"module"}