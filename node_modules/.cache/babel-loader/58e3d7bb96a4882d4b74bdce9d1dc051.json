{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kelse\\\\OneDrive\\\\Desktop\\\\react-apps\\\\pomodoro-timer\\\\src\\\\pomodoro\\\\TimerBar.js\";\nimport React from \"react\";\nimport PauseMessage from \"./PauseMessage\";\n\nfunction convertMS(value) {\n  const sec = parseInt(value, 10); // convert value to number if it's string\n\n  let minutes = Math.floor(sec / 60); // get minutes\n\n  let seconds = sec - minutes * 60; //  get seconds\n  // add 0 if value < 10; Example: 2 => 02\n\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n\n  return minutes + ':' + seconds; // Return is MM : SS\n} //<PauseMessage isTimerRunning={isTimerRunning}/>\n\n\nfunction TimerBar({\n  session,\n  breakDuration,\n  focusDuration,\n  isTimerRunning\n}) {\n  //formats Progress Bar\n  function progressbarStyle(focusDuration, breakDuration, session) {\n    if ((session === null || session === void 0 ? void 0 : session.label) === \"Focusing\") {\n      const amt = session.timeRemaining / focusDuration * 100;\n      return amt;\n    } else {\n      const amt = session.timeRemaining / breakDuration * 100;\n      return amt;\n    }\n  }\n\n  if (session !== null) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }\n    }, session === null || session === void 0 ? void 0 : session.label, \" for\", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 19\n      }\n    }, \" \", (session === null || session === void 0 ? void 0 : session.label) === \"Focusing\" ? convertMS(focusDuration) : convertMS(breakDuration), \" \"), \"minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }\n    }, convertMS(session === null || session === void 0 ? void 0 : session.timeRemaining), \" remaining\"), /*#__PURE__*/React.createElement(PauseMessage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuenow\": progressbarStyle(focusDuration, breakDuration, session) // TODO: Increase aria-valuenow as elapsed time increases\n      ,\n      style: {\n        width: `${100 - progressbarStyle(focusDuration, breakDuration, session)}%`\n      } // TODO: Increase width % as elapsed time increases\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 19\n      }\n    })))));\n  } else {\n    return null;\n  }\n}\n\nexport default TimerBar;","map":{"version":3,"sources":["C:/Users/kelse/OneDrive/Desktop/react-apps/pomodoro-timer/src/pomodoro/TimerBar.js"],"names":["React","PauseMessage","convertMS","value","sec","parseInt","minutes","Math","floor","seconds","TimerBar","session","breakDuration","focusDuration","isTimerRunning","progressbarStyle","label","amt","timeRemaining","height","width"],"mappings":"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","sourcesContent":["\r\nimport React from \"react\";\r\nimport PauseMessage from \"./PauseMessage\"\r\n\r\nfunction convertMS(value) {\r\n    const sec = parseInt(value, 10); // convert value to number if it's string\r\n    let minutes = Math.floor((sec/60)); // get minutes\r\n    let seconds = sec - (minutes * 60); //  get seconds\r\n    // add 0 if value < 10; Example: 2 => 02\r\n    if (minutes < 10) {minutes = \"0\"+minutes;}\r\n    if (seconds < 10) {seconds = \"0\"+seconds;}\r\n    return minutes+':'+seconds; // Return is MM : SS\r\n  }\r\n\r\n  \r\n//<PauseMessage isTimerRunning={isTimerRunning}/>\r\nfunction TimerBar({session, breakDuration, focusDuration, isTimerRunning}) {\r\n    //formats Progress Bar\r\n    function progressbarStyle(focusDuration, breakDuration, session){\r\n        if (session?.label === \"Focusing\") {\r\n          const amt= session.timeRemaining / focusDuration * 100;\r\n          return amt;\r\n        } else {\r\n          const amt= session.timeRemaining / breakDuration * 100;\r\n          return amt;\r\n        }\r\n      }\r\n    \r\n    if (session !== null) {\r\n      return (\r\n        <div>\r\n          <div className=\"row mb-2\">\r\n              <div className=\"col\">\r\n                {/* Session & Total Session Time*/}\r\n                <h2 data-testid=\"session-title\">\r\n                  {session?.label} for \r\n                  <span> {session?.label === \"Focusing\" ? convertMS(focusDuration) : convertMS(breakDuration)} </span>\r\n                  minutes\r\n                </h2>\r\n                {/* Countdown Timer */}\r\n                <p className=\"lead\" data-testid=\"session-sub-title\">\r\n                  {convertMS(session?.timeRemaining)} remaining\r\n                </p>\r\n                <PauseMessage/>\r\n              </div>\r\n            </div>\r\n            <div className=\"row mb-2\">\r\n              <div className=\"col\">\r\n                <div className=\"progress\" style={{ height: \"20px\" }}>\r\n                  <div\r\n                    className=\"progress-bar\"\r\n                    role=\"progressbar\"\r\n                    aria-valuemin=\"0\"\r\n                    aria-valuemax=\"100\"\r\n                    aria-valuenow={progressbarStyle(focusDuration, breakDuration, session)} // TODO: Increase aria-valuenow as elapsed time increases\r\n                    style={{ width: `${100 - progressbarStyle(focusDuration, breakDuration, session)}%` }} // TODO: Increase width % as elapsed time increases\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n      )} else {\r\n        return null;\r\n      }\r\n  }\r\n\r\n  export default TimerBar;"]},"metadata":{},"sourceType":"module"}